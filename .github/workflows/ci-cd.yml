name: Deploy to AWS EKS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  ECR_NAME: flask-webapp-ecr
  CLUSTER_ROLE: flask-eks-cluster-role
  NODEGROUP_ROLE: flask-eks-nodegroup-role

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      run: terraform init

    - name: Check & Import ECR and IAM if exists
      run: |
        set -e
        echo "Checking if ECR exists..."
        if aws ecr describe-repositories --repository-names $ECR_NAME >/dev/null 2>&1; then
          echo "ECR exists, importing to Terraform..."
          terraform import aws_ecr_repository.main $ECR_NAME || true
        fi

        echo "Checking if IAM Role (Cluster) exists..."
        if aws iam get-role --role-name $CLUSTER_ROLE >/dev/null 2>&1; then
          terraform import aws_iam_role.eks_cluster_role $CLUSTER_ROLE || true
        fi

        echo "Checking if IAM Role (NodeGroup) exists..."
        if aws iam get-role --role-name $NODEGROUP_ROLE >/dev/null 2>&1; then
          terraform import aws_iam_role.eks_nodegroup_role $NODEGROUP_ROLE || true
        fi

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve
